<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>对 Unicode 和 UTF-8 的理解</title>
      <link href="/2021/11/01/%E5%AF%B9-Unicode-%E5%92%8C-UTF-8-%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2021/11/01/%E5%AF%B9-Unicode-%E5%92%8C-UTF-8-%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>在读 <em>Fluent Python</em> 时，遇到这样一段：</p><blockquote><p>再举个例子，欧元符号（U+20AC）在 UTF-8 编码中是三个字节——\xe2\x82\xac，而在 UTF-16LE 中编码成两个字节：\xac\x20。</p></blockquote><p>后面的 <code>UTF-16LE</code> 的编码似乎很好理解，但是前面的用 <code>UTF-8</code> 编码成的三个字节没有办法猜测出来它的编码方法，于是去查阅资料，发现一篇阮一峰的<a href="https://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html">博客</a>，讲得很好，就在这里记录一下。</p><h1 id="关于-Unicode"><a href="#关于-Unicode" class="headerlink" title="关于 Unicode"></a>关于 Unicode</h1><p>世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。</p><p>可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失。这就是 Unicode，就像它的名字都表示的，这是一种所有符号的编码。</p><p>Unicode 当然是一个很大的集合，现在的规模可以容纳100多万个符号。每个符号的编码都不一样，比如，U+0639 表示阿拉伯字母 Ain，U+0041 表示英语的大写字母 A，U+4E25 表示汉字严。具体的符号对应表，可以查询相关的专业对应表。</p><p>需要注意的是，Unicode 只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。</p><p>比如，汉字严的 Unicode 是十六进制数 4E25，转换成二进制数足足有 15 位（100111000100101），也就是说，这个符号的表示至少需要2个字节。表示其他更大的符号，可能需要 3 个字节或者 4 个字节，甚至更多。</p><p>这里就有两个严重的问题，第一个问题是，如何才能区别 Unicode 和 ASCII ？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果 Unicode 统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是 0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。</p><p>它们造成的结果是：<br>1）出现了 Unicode 的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示 Unicode。<br>2）Unicode 在很长一段时间内无法推广，直到互联网的出现。</p><h1 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h1><p>互联网的普及，强烈要求出现一种统一的编码方式。UTF-8 就是在互联网上使用最广的一种 Unicode 的实现方式。其他实现方式还包括 UTF-16（字符用两个字节或四个字节表示）和 UTF-32（字符用四个字节表示），不过在互联网上基本不用。重复一遍，这里的关系是，UTF-8 是 Unicode 的实现方式之一。</p><p>UTF-8 最大的一个特点，就是它是一种变长的编码方式。它可以使用 1~4 个字节表示一个符号，根据不同的符号而变化字节长度。</p><p>UTF-8 的编码规则很简单，只有二条：</p><p>1）对于单字节的符号，字节的第一位设为 0，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的。</p><p>2）对于 n 字节的符号（n &gt; 1），第一个字节的前 n 位都设为 1，第 n + 1 位设为 0，后面字节的前两位一律设为 10。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码。</p><p>下表总结了编码规则，字母 x 表示可用编码的位。</p><pre><code>Unicode符号范围     | UTF-8编码方式(十六进制)          |（二进制）--------------------+---------------------------------------------0000 0000-0000 007F | 0xxxxxxx0000 0080-0000 07FF | 110xxxxx 10xxxxxx0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</code></pre><p>跟据上表，解读 UTF-8 编码非常简单。如果一个字节的第一位是 0，则这个字节单独就是一个字符；如果第一位是 1，则连续有多少个 1，就表示当前字符占用多少个字节。</p><p>下面，还是以汉字严为例，演示如何实现 UTF-8 编码。</p><p>严的 Unicode 是 4E25（100111000100101），根据上表，可以发现 4E25 处在第三行的范围内（0000 0800 - 0000 FFFF），因此严的 UTF-8 编码需要三个字节，即格式是 1110xxxx 10xxxxxx 10xxxxxx。然后，从严的最后一个二进制位开始，依次从后向前填入格式中的 x，多出的位补 0。这样就得到了，严的 UTF-8 编码是 11100100 10111000 10100101，转换成十六进制就是 E4B8A5。</p><p>按：明白了 UTF-8 的编码规则，上面的疑惑也就迎刃而解了。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> Python </tag>
            
            <tag> 疑惑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《散文與人 3 集》阅读札记</title>
      <link href="/2021/10/31/%E3%80%8A%E6%95%A3%E6%96%87%E8%88%87%E4%BA%BA-3-%E9%9B%86%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/"/>
      <url>/2021/10/31/%E3%80%8A%E6%95%A3%E6%96%87%E8%88%87%E4%BA%BA-3-%E9%9B%86%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="筱敏"><a href="#筱敏" class="headerlink" title="筱敏"></a>筱敏</h1><ul><li>筱敏</li></ul><blockquote><p>——回望神州堪一恸，中华偌大竟无人！</p></blockquote><blockquote><p>“要是我不去，谁去？”贞德说。<br>“祖国之陆沉谁挽？”秋瑾说。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
            <tag> 文学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《散文與人 2 集》阅读札记</title>
      <link href="/2021/10/30/%E3%80%8A%E6%95%A3%E6%96%87%E8%88%87%E4%BA%BA-2-%E9%9B%86%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/"/>
      <url>/2021/10/30/%E3%80%8A%E6%95%A3%E6%96%87%E8%88%87%E4%BA%BA-2-%E9%9B%86%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
            <tag> 文学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《道德经》阅读札记</title>
      <link href="/2021/10/30/%E3%80%8A%E9%81%93%E5%BE%B7%E7%BB%8F%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/"/>
      <url>/2021/10/30/%E3%80%8A%E9%81%93%E5%BE%B7%E7%BB%8F%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
            <tag> 古文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《一站式学习 C 编程》阅读札记</title>
      <link href="/2021/10/28/%E3%80%8A%E4%B8%80%E7%AB%99%E5%BC%8F%E5%AD%A6%E4%B9%A0-C-%E7%BC%96%E7%A8%8B%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/"/>
      <url>/2021/10/28/%E3%80%8A%E4%B8%80%E7%AB%99%E5%BC%8F%E5%AD%A6%E4%B9%A0-C-%E7%BC%96%E7%A8%8B%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="第-1-章-程序的基本概念"><a href="#第-1-章-程序的基本概念" class="headerlink" title="第 1 章 程序的基本概念"></a>第 1 章 程序的基本概念</h1><blockquote><p>编写程序可以说就是这样一个过程：把复杂的任务分解成子任务，把子任务再分解成更简单的任务，层层分解，直到最后简单得可以用以上指令来完成。</p></blockquote><p>按：这里所谓的指令是指如下的几种指令：</p><ul><li>输入（Input）</li><li>输出（Output）</li><li>基本运算</li><li>测试和分支</li><li>循环</li></ul><blockquote><p>一个语句的三种表示，该如何理解？</p></blockquote><p><img src="https://i.imgur.com/4teiZhM.png"></p><p>对于汇编指令转换到机器指令，这个过程由来汇编器来完成，例如，在第一条指令中，把 <code>mov ?, %eax</code> 这种格式的指令替换成机器码 <code>a1 ?</code>，<code>?</code> 表示一个地址，在汇编指令中是 <code>0x804a01c</code>，转换成机器码之后是 <code>1c a0 04 08</code>（这是指令中十六进制数的小端表示）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">! /bin/sh</span></span><br><span class="line">VAR=1</span><br><span class="line">VAR=$(($VAR+1))</span><br><span class="line">echo $VAR</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> /bin/sh script.sh</span></span><br><span class="line">2</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> VAR=1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> VAR=$((<span class="variable">$VAR</span>+<span class="number">1</span>))</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$VAR</span></span></span><br><span class="line">2</span><br></pre></td></tr></table></figure><blockquote><p>还有很多编程语言采用编译和解释相结合的方式执行，这种方式相当流行，Java、Python、Perl 等编程语言都采用这种方式。以 Python 为例，程序员写的源代码 .py 文件首先被编译成 .pyc 文件，称为字节码（Byte Code），然后字节码被 Python 虚拟机解释执行。</p></blockquote><blockquote><p>如何理解某个语言是第某代语言？</p></blockquote><p>以上介绍的机器语言称为第一代语言（1GL，1st Generation Programming Language），汇编语言称为第二代语言（2GL，2nd Generation ProgrammingLanguage），C、C++、Java、Python 等可以称为第三代语言（3GL，3rd Generation Programming Language）。目前已经有了 4GL（4th Generation Programming Language）和 5GL（5th Generation Programming Language）的概念。3GL 的编程语言虽然是用语句编程而不直接用指令编程，但语句也分为输入、输出、基本运算、测试分支和循环等几种，和指令有直接的对应关系。而 4GL 以后的编程语言更多是描述要做什么（Declarative）而不描述具体每一步怎么做（Imperative），具体步骤完全由编译器或解释器决定，例如 SQL（SQL，Structured Query Language，结构化查询语言）就是这样的例子。</p><blockquote><p>如何理解符号（Token）？</p></blockquote><p>语法规则是由符号（Token）和结构（Structure）的规则所组成的。Token 的概念相当于自然语言中的单词和标点、数学式中的数和运算符、化学分子式中的元素名和数字。</p><blockquote><p>如何区分词法规则和语法规则？</p></blockquote><p>关于 Token 的规则称为词法（Lexical）规则，而关于结构的规则称为语法（Grammar）规则。</p><p>按：这个在编译原理里面有学习过。</p><blockquote><p>阅读程序的建议？</p></blockquote><p>首先请记住形式语言远比自然语言紧凑，所以要多花点时间来读。其次，结构很重要，从上到下从左到右读往往不是一个好办法，而应该学会在大脑里解析：识别 Token，分解结构。</p><blockquote><p>关于 Bug 的典故？</p></blockquote><p>早期的计算机体积都很大，有一次一台计算机不能正常工作，工程师们找了半天原因最后发现是一只虫子（Bug）钻进计算机中造成的。从此以后，程序中的错误被叫做 Bug，而找到这些 Bug 并加以纠正的过程就叫做调试（Debug）。</p><blockquote><p>几种常见的错误类型？</p></blockquote><ul><li>编译时错误</li><li>运行时错误</li><li>逻辑错误和语义错误</li></ul><blockquote><p>关于 Linux 的一个有趣的东西？</p></blockquote><p>“Linus 的早期工程之一是编写一个交替打印 AAAA 和 BBBB 的程序，这玩意儿后来进化成了 Linux。”</p><blockquote><p>Linux 下编写 C 语言代码需要安装的一些包？</p></blockquote><ul><li>gcc: The GNU C compiler</li><li>libc6-dev: GNU C Library: Development Librariesand Header Files</li><li>manpages-dev: Manual pages about usingGNU/Linux for development</li><li>binutils:The GNU assembler,linker and binaryutilities</li><li>gdb: The GNU Debugger</li><li>make: The GNU version of the “make” utility</li></ul><blockquote><p>如何理解 Linux 下 C 语言程序编译后生成的 <code>a.out</code> 文件？</p></blockquote><p><code>a.out</code> 是 <code>Assembler Output</code> 的缩写，实际上一个 C 程序要先被编译器翻译成汇编程序，再被汇编器翻译成机器指令，最后还要经过链接器的处理才能成为可执行文件。</p><blockquote><p>C 程序中的 <code>main</code> 有什么特殊？</p></blockquote><p>C 程序总是从 main 里面的第一条语句开始执行的。</p><blockquote><p><code>&#123;&#125;</code> 的英文怎么说？</p></blockquote><p>Brace 或 Curly Brace。</p><blockquote><p>一个好的习惯是打开 gcc 的 <code>-Wall</code> 选项，让 gcc 提示所有的警告信息，不管是严重的还是不严重的，然后把这些问题从代码中全部消灭。</p></blockquote><p>按：<code>-Wall</code> 大概是 Warning all 的意思。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《精通 Linux（第 2 版）》阅读札记</title>
      <link href="/2021/10/28/%E3%80%8A%E7%B2%BE%E9%80%9A-Linux%EF%BC%88%E7%AC%AC-2-%E7%89%88%EF%BC%89%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/"/>
      <url>/2021/10/28/%E3%80%8A%E7%B2%BE%E9%80%9A-Linux%EF%BC%88%E7%AC%AC-2-%E7%89%88%EF%BC%89%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p><code>$</code> 是普通用户提示符。如果你是超级用户的话则是 <code>#</code>。</p></blockquote><h1 id="第-1-章-概述"><a href="#第-1-章-概述" class="headerlink" title="第 1 章 概述"></a>第 1 章 概述</h1><blockquote><p>理解操作系统工作原理最好的方法是抽象思维，换句话说，你可以暂时忽略大部分细节。就像坐车一样，通常你不会去在意车内固定发动机的装配螺栓，也不会关心你走的路是谁修筑的。</p></blockquote><blockquote><p>但如果你在开车的话，就需要了解更多的细节，比如如何控制油门、怎样换挡，还有如何处理意外情况。</p></blockquote><blockquote><p>内核是运行在内存中的软件，它向中央处理器发送指令。内核管理硬件系统，是硬件系统和应用程序之间进行通信的接口。</p></blockquote><blockquote><p>进程是指计算机中运行的所有程序，由内核统一管理，它们组成了最顶层，称为用户空间。</p></blockquote><blockquote><p>用户空间指的是那些用户进程能够访问的内存空间。如果一个用户进程出错并崩溃的话，其导致的后果也相对有限，并且能够被内核清理掉。</p></blockquote><blockquote><p>如果拥有足够的权限，用户进程可以将硬盘上的数据全部清除。</p></blockquote><blockquote><p>在我们谈论内存、进程、内核和其他内容时，你会经常看到状态（state）这个词。严格说来，一个状态就是一组特定排列的比特。例如，内存中 0110、0001 和 1011 这三组比特值即表示三个不同的状态。</p></blockquote><blockquote><p>内核负责管理以下四个方面：</p><ul><li>进程：内核决定哪个进程可以使用 CPU。</li><li>内存：内核管理所有的内存，为进程分配内存，管理进程间的共享内存以及空闲内存。</li><li>设备驱动程序：作为硬件系统（如磁盘）和进程之间的接口，内核负责操控硬件设备。</li><li>系统调用和支持：进程通常使用系统调用和内核进行通信。</li></ul></blockquote><blockquote><p>什么叫做上下文切换？</p></blockquote><p>一个进程让出 CPU 使用权给另一个进程称为上下文切换（context switch）。</p><blockquote><p>内核是在什么时候运行的？</p></blockquote><p>内核是在上下文切换时的时间段间隙中运行的。</p><blockquote><p>什么叫做 MMU？</p></blockquote><p>新型的 CPU 提供了 MMU（Memory Management Unit，内存管理单元）, MMU 使用了一种叫作虚拟内存的内存访问机制，即进程不是直接访问内存的实际物理地址，而是通过内核使得进程看起来可以使用整个系统的内存。</p><blockquote><p><code>fork()</code> 和 <code>exec()</code> 的作用分别是什么？</p></blockquote><ul><li>fork()：当进程调用 fork() 时，内核创建一个和该进程几乎一模一样的副本。</li><li>exec()：当进程调用 exec(program) 时，内核启动 program 来替换当前的进程。</li></ul><blockquote><p>Linux 中的所有用户进程都是通过 fork() 来启动的？</p></blockquote><p>除了 <code>init</code> 以外。</p><blockquote><p>当你在终端窗口中输入 ls 时，系统做了什么？</p></blockquote><p>终端窗口中的 shell 调用 fork() 创建一个 shell 的副本，然后该副本调用 exec(ls) 来运行 ls。</p><blockquote><p>什么叫做用户空间？</p></blockquote><p>内核分配给用户进程的内存我们称之为用户空间。</p><blockquote><p>root 用户在哪种模式运行？</p></blockquote><p>root 用户虽然权限很高，但是还是在用户模式而非内核模式中运行。</p><blockquote><p>什么叫做用户组？</p></blockquote><p>用户组是指一组用户的集合。用户组的主要作用是允许一个用户同组内的其他用户共享文件权限。</p><h1 id="第-2-章-基础命令和目录结构"><a href="#第-2-章-基础命令和目录结构" class="headerlink" title="第 2 章 基础命令和目录结构"></a>第 2 章 基础命令和目录结构</h1><blockquote><p>小知识？</p></blockquote><p>Linux 其实是 Unix 的一个变种，它的本质还是 Unix。</p><blockquote><p>Shell 的渊源？</p></blockquote><p>Unix 的 shell 有很多种，它们都是基于 Bourne shell（/bin/sh）这个贝尔实验室开发的标准 shell，在早期的 Unix 系统上运行。</p><p>Linux 使用了一个增强版本的 Bourne shell，我们称之为 bash 或者 “Bourne-again” shell。</p><blockquote><p>GUI 的全称是什么？</p></blockquote><p>图形用户界面（Graphical UserInterface，简称 GUI）</p><blockquote><p>Ubuntu 提示符的含义是什么？</p></blockquote><p><img src="https://i.imgur.com/l0T461a.png"></p><p>在 Ubuntu上，提示符是这样：<code>name@host:path$</code>（<code>用户名@主机名:路径$</code>）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> Hello here.</span></span><br></pre></td></tr></table></figure><p>按：在 shell 简单输出字符串。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/passwd</span></span><br></pre></td></tr></table></figure><p>按：这个命令是将文件 <code>/etc/passwd</code> 中的内容显示到 shell 窗口中。</p><p><img src="https://i.imgur.com/uD5MP22.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat file1 file2...</span></span><br></pre></td></tr></table></figure><p>按：cat 命令很简单，它显示一个或者多个文件的内容。</p><p>上面这个 cat 命令会显示 file1 和 file2 等文件的内容，然后退出。之所以叫 cat 是因为如果有多个文件的话，它会把这些文件的内容拼接起来显示。（concat，拼接）</p><blockquote><p>输入 cat 命令然后回车会发生什么？</p></blockquote><p>输入 cat 命令并回车，这时候你会看到屏幕上没有显示任何结果，因为 cat 命令仍在运行中。现在你输入几个字符然后回车，你会看到 cat 命令会在屏幕上显示出你刚刚输入的字符。最后你可以在任意空白行按 CTRL-D 终止 cat 命令的执行并回到 shell 提示符。</p><p>输入 cat 命令并回车，这时候你会看到屏幕上没有显示任何结果，因为 cat 命令仍在运行中。现在你输入几个字符然后回车，你会看到 cat 命令会在屏幕上显示出你刚刚输入的字符。最后你可以在任意空白行按 CTRL-D 终止 cat 命令的执行并回到 shell 提示符。</p><p><img src="https://i.imgur.com/ObAxQ6x.png"></p><blockquote><p>CTRL-D 和 CTRL-C 的区别？</p></blockquote><p>按 CTRL-D 终止当前终端的标准输入并终止命令（通常会终止一个<strong>程序</strong>）。这和 CTRL-C 不一样。CTRL-C 是终止当前<strong>进程</strong>的运行，无论是否有输入和输出。</p><p>按：这里小有疑惑。</p><blockquote><p><code>ls</code> 命令？</p></blockquote><p><code>ls</code> 命令显示指定目录的内容，默认参数为当前目录。<code>ls -l</code> 显示详细的列表，<code>ls -F</code> 显示文件类型信息。下面是文件详细列表的一个示例，其中第三列是文件的所有者，第四列是用户组，第五列是文件大小，后面是文件更改的时间、日期以及文件名。</p><p><img src="https://i.imgur.com/TyUfyNR.png"></p><blockquote><p><code>cp</code> 命令？</p></blockquote><p>cp 命令用来复制文件。下面的命令将文件 file1 复制到文件 file2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp file1 file2</span></span><br></pre></td></tr></table></figure><p>下面的命令将多个文件（file1 … fileN）复制到目录 dir：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp file1...fileN dir</span></span><br></pre></td></tr></table></figure><blockquote><p><code>mv</code> 命令？</p></blockquote><p>mv 命令有点类似 cp，用来重命名文件。下面的命令将文件名从 file1 重命名为 file2：</p><p>你也可以使用 mv 将多个文件移动到某个目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mv file1...fileN dir</span></span><br></pre></td></tr></table></figure><blockquote><p><code>touch</code> 命令？</p></blockquote><p>touch 命令用来创建文件。如果文件已经存在，则该命令会更新文件的时间戳，就是我们在 ls -l 命令的执行结果中看到的文件更新时间和日期。下面的命令创建一个新的文件，内容为空：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> touch file</span></span><br></pre></td></tr></table></figure><blockquote><p><code>rm</code> 命令？</p></blockquote><p>rm 命令用来删除文件，文件一旦被删除通常无法恢复：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm file</span></span><br></pre></td></tr></table></figure><blockquote><p><code>echo</code> 命令？</p></blockquote><p>echo 命令将它的参数显示到标准输出，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> Hello again.</span></span><br><span class="line">Hello again.</span><br></pre></td></tr></table></figure><blockquote><p>Unix 的根目录是什么？</p></blockquote><p>Unix 的目录结构是从 <code>/</code> 开始，有时候也叫作 root 目录。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《东京老铺》札记</title>
      <link href="/2021/10/26/%E3%80%8A%E4%B8%9C%E4%BA%AC%E8%80%81%E9%93%BA%E3%80%8B%E6%9C%AD%E8%AE%B0/"/>
      <url>/2021/10/26/%E3%80%8A%E4%B8%9C%E4%BA%AC%E8%80%81%E9%93%BA%E3%80%8B%E6%9C%AD%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>We arrived late at night, so my first opportunity to really see Japan was during our morning walk the next day through the suburb to see the Arakawa river.</p></blockquote><blockquote><p>All the sights I had seen in Japanese animation and comics sprawled before my eyes.</p></blockquote><blockquote><p>I had this strange, nostalgic feeling, like I knew what was around the corner yet when I actually went there everything was more interesting than I could imagine.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 艺术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
            <tag> 艺术 </tag>
            
            <tag> 插画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 切片学习笔记</title>
      <link href="/2021/10/23/Python-%E5%88%87%E7%89%87%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/10/23/Python-%E5%88%87%E7%89%87%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;bicycle&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[::<span class="number">3</span>]</span><br><span class="line"><span class="string">&#x27;bye&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[::-<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;elcycib&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[::-<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;eccb&#x27;</span></span><br></pre></td></tr></table></figure><p>这个简单的例子使用的语法格式是 <code>seq[start:end:step]</code>，它的含义是</p><blockquote><p>在 start 和 end 之间以 step 为间隔取值。step 的值可以为负，负值意味着反向取值。</p></blockquote><p>上面有一个经典的利用 step 为负值的反转字符串的用法：<code>s[::-1]</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FluentPython </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《倪亚达很不屑》札记</title>
      <link href="/2021/10/21/%E3%80%8A%E5%80%AA%E4%BA%9A%E8%BE%BE%E5%BE%88%E4%B8%8D%E5%B1%91%E3%80%8B%E6%9C%AD%E8%AE%B0/"/>
      <url>/2021/10/21/%E3%80%8A%E5%80%AA%E4%BA%9A%E8%BE%BE%E5%BE%88%E4%B8%8D%E5%B1%91%E3%80%8B%E6%9C%AD%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>想着，袁哲生的书，即使标着儿童小说的标签，还是拿过来读一读。袁哲生的书，太少了。说不定之后我要把袁哲生做记者时写的记者文也拿过来读读了。</p><p>不知道该遗憾还是不该，我在小学五六年级的时候没有机会读到袁哲生的这个小说，不然，说不定，我“认识”他的时间可能会更加早一些。那时读的都是曹文轩、黄蓓佳之流，也好，有袁哲生的话，那就更好了，那么，在此种情况下，我也将变得很忧郁吧。内里的忧郁。表面说不定会更加阳光。还有，更叛逆，想到这一点，我明白了，我本应该在小时候遇到倪亚达的。</p><blockquote><p>倪亚达<br>学校：明天国小<br>班级：五年一班<br>身份证号：（还没有身份证）<br>特征：矮小，右脚比左脚大一公分<br>兴趣：不劳而获<br>最讨厌的事：量身高和做数学作业<br>口头禅：真是令人不屑<br>未来的志愿：棒球投手或是老师以外的工作<br>休闲方式：写日记、寻找食物</p></blockquote><p>按：如果单单从这个简单的人物描述来看，倪亚达和 <code>花田少年史</code> 中的花田一路君似乎多有相似之处。都喜欢搞怪。只是，从正文的第一篇开始，就很能使人感受到袁哲生那忧郁的气质无可奈何也无法避免地投射到了倪亚达的身上。花田一路君才是真的阳光少年。倪亚达是假装阳光的月光少年。</p><blockquote><p>王大川<br>体重像原子弹，放屁时会产生一朵蕈状云，动作很迟钝，花钱却很迅速。</p></blockquote><p>按：冷笑话。小孩子可能觉得不是。</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
            <tag> 文学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新窝建成记</title>
      <link href="/2021/10/21/%E6%96%B0%E7%AA%9D%E5%BB%BA%E6%88%90%E8%AE%B0/"/>
      <url>/2021/10/21/%E6%96%B0%E7%AA%9D%E5%BB%BA%E6%88%90%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>这个新的博客花了大概两节课（数字图像处理，这门课的老师讲得实在是太差了），然后大概是下午两个多小时，经历了一点点问题之后，整体上是完成了。</p><p>这一博客主要是文字记录，舍弃一些非常复杂的数学公式。</p><p>图床完全使用 imgur。这样其实有一点点地方需要注意，那就是在访问的时候一定要挂上梯子，这样才能正常显示博客中的图片。不过，其他的文字性的内容还是可以正常访问的，无论挂不挂梯子。</p><p>在解决了最后一点点小问题之后，发现这个博客已经差不多完成了。</p><p>下面，该开始写博客了。</p><p>数学公式还没有配置，不过，没有问题，到时用到了再说。而且，这个博客，我大概率只会写一点简单的数学公式。无妨也。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/21/hello-world/"/>
      <url>/2021/10/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
