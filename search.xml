<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机相关的一些零碎的知识</title>
      <link href="/2021/11/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9B%B6%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
      <url>/2021/11/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9B%B6%E7%A2%8E%E7%9A%84%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>何为命令行界面？</p></blockquote><p>命令行界面，即 Command Line Interface，CLI。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 小知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python bytes 和 bytearray 的区别</title>
      <link href="/2021/11/02/Python-bytes-%E5%92%8C-bytearray-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2021/11/02/Python-bytes-%E5%92%8C-bytearray-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>本文基本上转载自 <a href="https://stackoverflow.com/questions/62903377/python3-bytes-vs-bytearray-and-converting-to-and-from-strings">StackOverflow</a></p><p>简单来讲，就是这样：</p><blockquote><p>Python3’s bytes and bytearray classes both hold arrays of bytes, where each byte can take on a value between 0 and 255. The primary difference is that a bytes object is immutable, meaning that once created, you cannot modify its elements. By contrast, a bytearray object allows you to modify its elements.</p></blockquote><p>我一开始只是对于字节表示的字符串有些困惑，然后了解了 Unicode 编码和 UTF-8 编码之后，尤其是看了阮一峰老师的相关博客后，基本上茅塞顿开。然后针对这个字节表示的字符串，其本质还需要加一条信息，那就是编码的规则，如 UTF-8，然后我们就能够将纯粹的字节给翻译成字符，然后进一步翻译成字符串。</p><p>至于 bytes 和 bytearray 类型，不过是变与不变的数据类型罢了。</p><p>下面是原 StackOverflow 帖子中的一些代码，用来辅助理解。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; bytes(5)</span></span><br><span class="line">b&#x27;\x00\x00\x00\x00\x00&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; bytes([97, 98, 99])</span></span><br><span class="line">b&#x27;abc&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; b<span class="string">&#x27;abc&#x27;</span></span></span><br><span class="line">b&#x27;abc&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; bytes(<span class="string">&#x27;abc&#x27;</span>)</span></span><br><span class="line">TypeError: string argument without an encoding</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; bytes(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span></span><br><span class="line">b&#x27;abc&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="string">&#x27;abc&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span></span><br><span class="line">b&#x27;abc&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="string">&#x27;abc&#x27;</span>.encode(<span class="string">&#x27;utf-16&#x27;</span>)</span></span><br><span class="line">b&#x27;\xff\xfea\x00b\x00c\x00&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="string">&#x27;abc&#x27;</span>.encode(<span class="string">&#x27;utf-16-le&#x27;</span>)</span></span><br><span class="line">b&#x27;a\x00b\x00c\x00&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a = bytes(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a</span></span><br><span class="line">b&#x27;abc&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a[1] = 102</span></span><br><span class="line">TypeError: &#x27;bytes&#x27; object does not support item assignment</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a = bytes(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a</span></span><br><span class="line">b&#x27;abc&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a[1] = 102</span></span><br><span class="line">TypeError: &#x27;bytes&#x27; object does not support item assignment</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; bytearray(5)</span></span><br><span class="line">bytearray(b&#x27;\x00\x00\x00\x00\x00\x00\x00\x00&#x27;)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;bytearray([1, 2, 3])</span></span><br><span class="line">bytearray(b&#x27;\x01\x02\x03&#x27;)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; bytearray(<span class="string">&#x27;abc&#x27;</span>)</span></span><br><span class="line">TypeError: string argument without an encoding</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; bytearray(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span></span><br><span class="line">bytearray(b&#x27;abc&#x27;)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; bytearray(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;utf-16&#x27;</span>)</span></span><br><span class="line">bytearray(b&#x27;\xff\xfea\x00b\x00c\x00&#x27;)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; bytearray(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;utf-16-le&#x27;</span>)</span></span><br><span class="line">bytearray(b&#x27;a\x00b\x00c\x00&#x27;)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a = bytearray(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a</span></span><br><span class="line">bytearray(b&#x27;abc&#x27;)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a[1]=114</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a</span></span><br><span class="line">bytearray(b&#x27;arc&#x27;)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a = bytes(3)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a</span></span><br><span class="line">b&#x27;\x00\x00\x00&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; b = bytearray(4)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; b</span></span><br><span class="line">bytearray(b&#x27;\x00\x00\x00\x00&#x27;)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a+b</span></span><br><span class="line">b&#x27;\x00\x00\x00\x00\x00\x00\x00&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; b+a</span></span><br><span class="line">bytearray(b&#x27;\x00\x00\x00\x00\x00\x00\x00&#x27;)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a = bytes(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a</span></span><br><span class="line">b&#x27;abc&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; a.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span></span><br><span class="line">&#x27;abc&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; b = bytearray(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;utf-16-le&#x27;</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; b</span></span><br><span class="line">bytearray(b&#x27;a\x00b\x00c\x00&#x27;)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; b.decode(<span class="string">&#x27;utf-16-le&#x27;</span>)</span></span><br><span class="line">&#x27;abc&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 的一些小知识</title>
      <link href="/2021/11/02/Python-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
      <url>/2021/11/02/Python-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Python 的 <code>utf-8</code> 编码有几种写法？</p></blockquote><p>‘utf_8’，而且经常有几个别名，如’utf8’、’utf-8’ 和’U8’。</p><p>来源：<em>Fluent Python</em>。</p><blockquote><p><code>chr()</code> 函数的理解？</p></blockquote><p>The chr() method returns a string representing a character whose Unicode code point is an integer.</p><p>Syntax:</p><pre><code>chr(num)num : integer value</code></pre><ul><li>The chr() method takes only one integer as argument.</li><li>The range may vary from 0 to 1,1141,111(0x10FFFF in base 16).</li><li>The chr() method returns a character whose unicode point is num, an integer.<br>If an integer is passed that is outside the range then the method returns a ValueError.</li></ul><p>使用范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; chr(0xaa)</span></span><br><span class="line">&#x27;ª&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; chr(96)</span></span><br><span class="line">&#x27;`&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; chr(48)</span></span><br><span class="line">&#x27;0&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; chr(03ce)</span></span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1</span><br><span class="line">    chr(03ce)</span><br><span class="line">         ^</span><br><span class="line">SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; chr(0x03ce)</span></span><br><span class="line">&#x27;ώ&#x27;</span><br></pre></td></tr></table></figure><p>来源：<a href="https://www.geeksforgeeks.org/chr-in-python/">GeeksforGeeks</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 字符串前缀的含义</title>
      <link href="/2021/11/01/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%89%8D%E7%BC%80%E7%9A%84%E5%90%AB%E4%B9%89/"/>
      <url>/2021/11/01/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%89%8D%E7%BC%80%E7%9A%84%E5%90%AB%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>u</code> 前缀</p></blockquote><p>eg：<code>u&#39;春宵苦短，前进吧，girl&#39;</code></p><p>含义：</p><ul><li>前缀 <code>u</code> 表示该字符串是使用 Unicode 进行编码的字符串</li><li>这个在 Python2 中比较常用，而 Python3 中，所有字符串的编码默认都是 Unicode</li></ul><blockquote><p><code>r</code> 前缀</p></blockquote><p>eg：<code>r&#39;\nabcd\t*?&#39;</code></p><p>含义：</p><ul><li><code>r</code> 表示 raw string，即原始字符串，如 <code>r&#39;\n&#39;</code> 中的 <code>\n</code> 就表示 <code>\</code> 和 <code>n</code> 这两个字符，而非它们连起来表示的换行</li><li>正则表达式和文件路径用的比较多</li><li>注意不能在原始字符串结尾输入反斜线，否则 Python 不知道这是一个字符还是一个换行符，比如，在 PyCharm 中，这样写就会报错：<br>  <img src="https://i.imgur.com/izZiyCs.png"></li></ul><blockquote><p><code>b</code> 前缀</p></blockquote><p>含义：</p><ul><li><p><code>b</code> 前缀表示该字符串是 bytes 类型（Python 的字符串有 str、bytes、bytearray 等类型）</p></li><li><p>Python2 中 str 默认是 bytes 类，Python3 则不然</p></li><li><p>Python3 中，bytes 和 str 相互转换的方式如下</p>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">utf8Str.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">bytesStr.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><code>f</code> 前缀</p></blockquote><p>举一个例子就能理解：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testFStr</span>():</span></span><br><span class="line">    name = <span class="string">&#x27;Alex&#x27;</span></span><br><span class="line">    age = <span class="number">25</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;My name is <span class="subst">&#123;name&#125;</span>, I am <span class="subst">&#123;age&#125;</span> years old&#x27;</span>)</span><br><span class="line"></span><br><span class="line">testFStr()</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>My name is Alex, I am 25 years old</code></pre><p>含义：</p><ul><li><code>f</code> 表示 format 的意思，用来格式化字符串，主要是想替代 <code>format()</code> 方法</li><li>还有一些高级用法暂时按下不表</li></ul><p>关于这个前缀的问题，Python 的文档其实也有讲，详见 <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals">Python docs</a>。</p><hr><p>参考：</p><p>1、<a href="https://www.pythonf.cn/read/146684">https://www.pythonf.cn/read/146684</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对 Unicode 和 UTF-8 的理解</title>
      <link href="/2021/11/01/%E5%AF%B9-Unicode-%E5%92%8C-UTF-8-%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2021/11/01/%E5%AF%B9-Unicode-%E5%92%8C-UTF-8-%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>在读 <em>Fluent Python</em> 时，遇到这样一段：</p><blockquote><p>再举个例子，欧元符号（U+20AC）在 UTF-8 编码中是三个字节——\xe2\x82\xac，而在 UTF-16LE 中编码成两个字节：\xac\x20。</p></blockquote><p>后面的 <code>UTF-16LE</code> 的编码似乎很好理解，但是前面的用 <code>UTF-8</code> 编码成的三个字节没有办法猜测出来它的编码方法，于是去查阅资料，发现一篇阮一峰的<a href="https://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html">博客</a>，讲得很好，就在这里记录一下。</p><h1 id="关于-Unicode"><a href="#关于-Unicode" class="headerlink" title="关于 Unicode"></a>关于 Unicode</h1><p>世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。</p><p>可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失。这就是 Unicode，就像它的名字都表示的，这是一种所有符号的编码。</p><p>Unicode 当然是一个很大的集合，现在的规模可以容纳100多万个符号。每个符号的编码都不一样，比如，U+0639 表示阿拉伯字母 Ain，U+0041 表示英语的大写字母 A，U+4E25 表示汉字严。具体的符号对应表，可以查询相关的专业对应表。</p><p>需要注意的是，Unicode 只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。</p><p>比如，汉字严的 Unicode 是十六进制数 4E25，转换成二进制数足足有 15 位（100111000100101），也就是说，这个符号的表示至少需要2个字节。表示其他更大的符号，可能需要 3 个字节或者 4 个字节，甚至更多。</p><p>这里就有两个严重的问题，第一个问题是，如何才能区别 Unicode 和 ASCII ？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果 Unicode 统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是 0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。</p><p>它们造成的结果是：<br>1）出现了 Unicode 的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示 Unicode。<br>2）Unicode 在很长一段时间内无法推广，直到互联网的出现。</p><h1 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h1><p>互联网的普及，强烈要求出现一种统一的编码方式。UTF-8 就是在互联网上使用最广的一种 Unicode 的实现方式。其他实现方式还包括 UTF-16（字符用两个字节或四个字节表示）和 UTF-32（字符用四个字节表示），不过在互联网上基本不用。重复一遍，这里的关系是，UTF-8 是 Unicode 的实现方式之一。</p><p>UTF-8 最大的一个特点，就是它是一种变长的编码方式。它可以使用 1~4 个字节表示一个符号，根据不同的符号而变化字节长度。</p><p>UTF-8 的编码规则很简单，只有二条：</p><p>1）对于单字节的符号，字节的第一位设为 0，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的。</p><p>2）对于 n 字节的符号（n &gt; 1），第一个字节的前 n 位都设为 1，第 n + 1 位设为 0，后面字节的前两位一律设为 10。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码。</p><p>下表总结了编码规则，字母 x 表示可用编码的位。</p><pre><code>Unicode符号范围     | UTF-8编码方式(十六进制)          |（二进制）--------------------+---------------------------------------------0000 0000-0000 007F | 0xxxxxxx0000 0080-0000 07FF | 110xxxxx 10xxxxxx0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</code></pre><p>跟据上表，解读 UTF-8 编码非常简单。如果一个字节的第一位是 0，则这个字节单独就是一个字符；如果第一位是 1，则连续有多少个 1，就表示当前字符占用多少个字节。</p><p>下面，还是以汉字严为例，演示如何实现 UTF-8 编码。</p><p>严的 Unicode 是 4E25（100111000100101），根据上表，可以发现 4E25 处在第三行的范围内（0000 0800 - 0000 FFFF），因此严的 UTF-8 编码需要三个字节，即格式是 1110xxxx 10xxxxxx 10xxxxxx。然后，从严的最后一个二进制位开始，依次从后向前填入格式中的 x，多出的位补 0。这样就得到了，严的 UTF-8 编码是 11100100 10111000 10100101，转换成十六进制就是 E4B8A5。</p><p>按：明白了 UTF-8 的编码规则，上面的疑惑也就迎刃而解了。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> Python </tag>
            
            <tag> 疑惑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《散文與人 3 集》阅读札记</title>
      <link href="/2021/10/31/%E3%80%8A%E6%95%A3%E6%96%87%E8%88%87%E4%BA%BA-3-%E9%9B%86%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/"/>
      <url>/2021/10/31/%E3%80%8A%E6%95%A3%E6%96%87%E8%88%87%E4%BA%BA-3-%E9%9B%86%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="无家的宿命"><a href="#无家的宿命" class="headerlink" title="无家的宿命"></a>无家的宿命</h1><ul><li>筱敏</li></ul><blockquote><p>这是一个干旱的时代。<br>干旱穿透一切，吮尽一切。干旱无处不在。这是一个所有生命都在萎蔫，所有灵魂都在皱缩的时代。</p></blockquote><p>按：现在是吗？现在依然是，甚至有过之而无不及。皱缩的灵魂，皱缩的脸，皱缩的本该水灵灵的婴孩。</p><blockquote><p>“上帝总是把对男人们隐瞒的话，通过女孩子启示凡间。”<br>…<br>“还有什么比水更明澈的呢？”</p></blockquote><blockquote><p>在一颗伟大的心灵深处，必定是一泓静谧的汪洋，深深隐匿着巨大的忧伤。那忧伤没有缘起，也没有终结，如同人类的苦难无由测度一样。它只暗暗地涌动，深蓝的，苦涩的，以一种郁积了无数世代的力量。</p></blockquote><p>按：伟大的心灵从来也不轻易示人，或者说，为人所察觉。</p><blockquote><p>远天是白云，白云的边缘是剑刃一般锋利的霞光。</p></blockquote><blockquote><p>——拯救法兰西！去拯救覆亡中的法兰西！你听见山的那一边不长青草只长烈焰的大地在悲鸣吗？</p></blockquote><p>按：究竟是拯救谁呢？</p><blockquote><p>她藏匿在自己纤细的影子里，为自己过于巨大的使命哭泣。</p></blockquote><blockquote><p>人生的全部意义，只在于作一件旁人无从替代的事情。</p></blockquote><blockquote><p>——回望神州堪一恸，中华偌大竟无人！</p></blockquote><blockquote><p>“要是我不去，谁去？”贞德说。<br>“祖国之陆沉谁挽？”秋瑾说。</p></blockquote><blockquote><p>女性并不以冷峻的扫视和解析的目光去把握世界，女性是倾听，是触摸，用母性的温软与孩童的纯净。</p></blockquote><blockquote><p>——我过去是这样，现在这样，将来依然这样！<br>这是卢森堡的绝笔。</p></blockquote><blockquote><p>人只不过是一棵芦苇，我承认女性更是一棵脆弱的芦苇。</p></blockquote><blockquote><p><code>卑琐</code> 的坠落。</p></blockquote><blockquote><p>人的尊严不承认强权，正如大海不承认石头或钢铁的堆砌物一样。当浩瀚的大海展现在你的面前，你依然觉得水的柔弱吗？</p></blockquote><blockquote><p>成为殉难者。成为传说。成为使暗淡的现实世界惊悸的星辰。</p></blockquote><blockquote><p>在一个灯火烛天的夜晚，秋瑾面对屠刀说：“且住！容我一望，有无亲友来别我？”于是她张目四望。秋雨，秋风，倒伏的荼蘼，依然沉陷的沼泽，人群……她寻找一双回应的眼睛，找得太久，于是她闭上了眼睛。</p></blockquote><p>按：终究是没有找到。</p><p>篇按：</p><p>贞德，秋瑾，卢森堡。女性。</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
            <tag> 文学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《散文與人 2 集》阅读札记</title>
      <link href="/2021/10/30/%E3%80%8A%E6%95%A3%E6%96%87%E8%88%87%E4%BA%BA-2-%E9%9B%86%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/"/>
      <url>/2021/10/30/%E3%80%8A%E6%95%A3%E6%96%87%E8%88%87%E4%BA%BA-2-%E9%9B%86%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="“抢救失足者”"><a href="#“抢救失足者”" class="headerlink" title="“抢救失足者”"></a>“抢救失足者”</h1><ul><li>韦君宜</li></ul><p>按：</p><p>君宜二字，出处似乎有两个，</p><ul><li>出自《诗经·鸳鸯》，“君子万年，福禄宜之。”</li><li>出自《诗经·裳裳者华》，“左之右之，君子宜之”</li></ul><blockquote><p>人们骄傲地称呼是同志，它比一切尊称都光荣。<br>有这称呼各处都是家庭，无非人种黑白棕黄红。</p></blockquote><blockquote><p>“我是一二·九那时候的学生。说老实话我当时在学校只是一个中材的学生，一点也不出色。真正出色的，聪明能干、崭露头角的，是那些当时参加运动投奔了革命的同学，如果他们不干革命而来这里学习，那成就不知要比我这类人高多少倍！”</p></blockquote><blockquote><p>说他们全体是特务，这等于承认中国共产党所坚持的革命原则和马列主义毫无吸引力，不能吸引一切爱国青年，所有的爱国青年都被国民党吸引去了！</p></blockquote><blockquote><p>李又<code>罘</code></p></blockquote><blockquote><p>柳<code>湜</code></p></blockquote><p>按：人名。</p><blockquote><p>“形势非叫你坦白不可，你就坦白了罢。”</p></blockquote><blockquote><p>裴<code>崑</code>山</p></blockquote><blockquote><p>丁<code>汾</code></p></blockquote><blockquote><p>“我真后悔当时为什么要背叛我的家庭出来革命！我真应该跟着我的父亲跑的。当时我想过，如果能再见到我的父亲，我就要对他说：把这些冤枉我的人们都杀掉吧。”</p></blockquote><blockquote><p>我气的是这样<code>“为丛驱雀”</code>，硬把她驱赶到这样地步。</p></blockquote><p>按：</p><p>“为丛驱雀”这个词在辞典中还不好查，可能是“为渊驱鱼”更常用一点，遂摘录《国语辞典》中的“為淵敺魚”项如下：</p><p>水獺想吃魚，卻把魚趕到深淵去。語出◇《孟子・離婁上》：「為淵敺魚者，獺也；為叢敺爵者，鸇也；為湯武敺民者，桀與紂也。」比喻處理不當而使結果違背最初的願望。◇《文明小史》第一三回：「又被這些不肖官吏任意凌虐，以致為淵驅魚。」也作「為叢敺雀」、「為叢驅雀」。</p><blockquote><p>简直和“和尚、包袱、伞”的笑话差不多。</p></blockquote><blockquote><p>月光明亮，万感萦心。我究竟身犯何罪，会弄到今天这个样子的？</p></blockquote><blockquote><p>小院徐行曳破衫，风回犹似旧罗纨。<br>十年豪气凭谁尽，补罅文章付笑谈。<br>自忏误吾唯识字，何似当初学纺棉。<br>隙院月明光似水，不知身在几何年。</p></blockquote><blockquote><p>毛主席说了一句：“整风整错了的同志！是我错了，我向你们道歉。”说罢举手齐帽行了一个军礼。又说：“我行了礼你们要还礼，不还礼我的手放不下来呀！”有这几句话，我们就全都原谅了。而且全都忘掉了。</p></blockquote><p>篇按：</p><p>暂时不按。</p><h1 id="出狱琐记"><a href="#出狱琐记" class="headerlink" title="出狱琐记"></a>出狱琐记</h1><ul><li>梅志</li></ul><blockquote><p>“即日离此去蓉，父字。”</p></blockquote><p>按：蓉，指成都。</p><blockquote><p>这不由得使我们想起那里的耗油牛肉、南乳扣肉、五柳鱼……</p></blockquote><p>按：菜名呀。</p><blockquote><p>有一次我站在柜台前，总算买到了《诗刊》和《文汇月刊》。</p></blockquote><p>按：《诗刊》呀。</p><blockquote><p>他与世隔绝二十多年，现在已经七十七岁了，还就什么业？加之他认为自己文不能当<code>录事</code>，武不能当兵，无能就业。</p></blockquote><blockquote><p>他还像过去一样细眯着眼，好像摆龙门阵，说别人的故事，有时还说几句笑话，但他自己不笑。</p></blockquote><blockquote><p>寒<code>伧</code>可怜。</p></blockquote><blockquote><p>胡风不但要了面，还要了二两曲酒，一碟猪头肉，一碟花生米。</p></blockquote><p>篇按：</p><p>这篇散文平淡得有点吓人。激情之类的东西是怎么也扑腾不起来，人老，心更老。</p><h1 id="想起了孟超"><a href="#想起了孟超" class="headerlink" title="想起了孟超"></a>想起了孟超</h1><ul><li>洁泯</li></ul><blockquote><p>不知为什么，他属意于<code>红粉英姿</code>的描摹</p></blockquote><blockquote><p>但词章华丽，<code>泼墨酣练</code></p></blockquote><blockquote><p>其实这种诬指和任意影射的<code>鬼蜮</code>伎俩，明眼人早已看穿，它只是为了适应某种气候的需要而设置的圈套。可笑的是如今仍有人承此衣钵，煞有介事地也弄起这把戏来，办法居然和祖传的搞得一模一样，先由一处发难，诬指，影射，基调已定，遂由其可指挥的阵地群起而围攻之，形成声势，被诬者命定的是<code>罪不可逭</code>。</p></blockquote><blockquote><p>《阅微草堂笔记》中有云：对于鬼魅，“大抵畏则心乱，心乱则神涣，神涣则鬼得乘之。不畏则心定，心定则神全……神志湛然，鬼惭而去”。诚哉斯言。</p></blockquote><p>篇按：</p><p>我们本该是有艺术的。我真想看一看《红拂夜奔》和《李慧娘》啊。</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
            <tag> 文学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《道德经》阅读札记</title>
      <link href="/2021/10/30/%E3%80%8A%E9%81%93%E5%BE%B7%E7%BB%8F%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/"/>
      <url>/2021/10/30/%E3%80%8A%E9%81%93%E5%BE%B7%E7%BB%8F%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>阅读的版本，选的是商务印书馆出版的陈鼓应的《老子今注今译》，事先大概翻了一遍，发现内容挺多挺详尽的，暂时就读这个版本吧。</p><h1 id="一章"><a href="#一章" class="headerlink" title="一章"></a>一章</h1><p>道可道，非常道；名可名，非常名。<br>无，名天地之始；有名万物之母。<br>故常无，欲以观其妙；常有，欲以观其徼。<br>此两者，同出而异名，同谓之玄。玄之又玄，众妙之门。</p><p>按：</p><ul><li>徼：有说是“窍”的，有说是“边”的，我认为，可能这个“窍”要更加可能一点点。</li></ul><h1 id="二章"><a href="#二章" class="headerlink" title="二章"></a>二章</h1><p>天下皆知美之为美，斯恶已；皆知善之为善，斯不善已。<br>有无相生，难易相成，长短相形，高下相盈，音声相和，前后相随。<br>是以圣人处无为之事，行不言之教；万物作而不为始，生而不有，为而不恃，功成而弗居。夫唯弗居，是以不去。</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
            <tag> 古文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《精通 Linux（第 2 版）》阅读札记</title>
      <link href="/2021/10/28/%E3%80%8A%E7%B2%BE%E9%80%9A-Linux%EF%BC%88%E7%AC%AC-2-%E7%89%88%EF%BC%89%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/"/>
      <url>/2021/10/28/%E3%80%8A%E7%B2%BE%E9%80%9A-Linux%EF%BC%88%E7%AC%AC-2-%E7%89%88%EF%BC%89%E3%80%8B%E9%98%85%E8%AF%BB%E6%9C%AD%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p><code>$</code> 是普通用户提示符。如果你是超级用户的话则是 <code>#</code>。</p></blockquote><h1 id="第-1-章-概述"><a href="#第-1-章-概述" class="headerlink" title="第 1 章 概述"></a>第 1 章 概述</h1><blockquote><p>理解操作系统工作原理最好的方法是抽象思维，换句话说，你可以暂时忽略大部分细节。就像坐车一样，通常你不会去在意车内固定发动机的装配螺栓，也不会关心你走的路是谁修筑的。</p></blockquote><blockquote><p>但如果你在开车的话，就需要了解更多的细节，比如如何控制油门、怎样换挡，还有如何处理意外情况。</p></blockquote><blockquote><p>内核是运行在内存中的软件，它向中央处理器发送指令。内核管理硬件系统，是硬件系统和应用程序之间进行通信的接口。</p></blockquote><blockquote><p>进程是指计算机中运行的所有程序，由内核统一管理，它们组成了最顶层，称为用户空间。</p></blockquote><blockquote><p>用户空间指的是那些用户进程能够访问的内存空间。如果一个用户进程出错并崩溃的话，其导致的后果也相对有限，并且能够被内核清理掉。</p></blockquote><blockquote><p>如果拥有足够的权限，用户进程可以将硬盘上的数据全部清除。</p></blockquote><blockquote><p>在我们谈论内存、进程、内核和其他内容时，你会经常看到状态（state）这个词。严格说来，一个状态就是一组特定排列的比特。例如，内存中 0110、0001 和 1011 这三组比特值即表示三个不同的状态。</p></blockquote><blockquote><p>内核负责管理以下四个方面：</p><ul><li>进程：内核决定哪个进程可以使用 CPU。</li><li>内存：内核管理所有的内存，为进程分配内存，管理进程间的共享内存以及空闲内存。</li><li>设备驱动程序：作为硬件系统（如磁盘）和进程之间的接口，内核负责操控硬件设备。</li><li>系统调用和支持：进程通常使用系统调用和内核进行通信。</li></ul></blockquote><blockquote><p>什么叫做上下文切换？</p></blockquote><p>一个进程让出 CPU 使用权给另一个进程称为上下文切换（context switch）。</p><blockquote><p>内核是在什么时候运行的？</p></blockquote><p>内核是在上下文切换时的时间段间隙中运行的。</p><blockquote><p>什么叫做 MMU？</p></blockquote><p>新型的 CPU 提供了 MMU（Memory Management Unit，内存管理单元）, MMU 使用了一种叫作虚拟内存的内存访问机制，即进程不是直接访问内存的实际物理地址，而是通过内核使得进程看起来可以使用整个系统的内存。</p><blockquote><p><code>fork()</code> 和 <code>exec()</code> 的作用分别是什么？</p></blockquote><ul><li>fork()：当进程调用 fork() 时，内核创建一个和该进程几乎一模一样的副本。</li><li>exec()：当进程调用 exec(program) 时，内核启动 program 来替换当前的进程。</li></ul><blockquote><p>Linux 中的所有用户进程都是通过 fork() 来启动的？</p></blockquote><p>除了 <code>init</code> 以外。</p><blockquote><p>当你在终端窗口中输入 ls 时，系统做了什么？</p></blockquote><p>终端窗口中的 shell 调用 fork() 创建一个 shell 的副本，然后该副本调用 exec(ls) 来运行 ls。</p><blockquote><p>什么叫做用户空间？</p></blockquote><p>内核分配给用户进程的内存我们称之为用户空间。</p><blockquote><p>root 用户在哪种模式运行？</p></blockquote><p>root 用户虽然权限很高，但是还是在用户模式而非内核模式中运行。</p><blockquote><p>什么叫做用户组？</p></blockquote><p>用户组是指一组用户的集合。用户组的主要作用是允许一个用户同组内的其他用户共享文件权限。</p><h1 id="第-2-章-基础命令和目录结构"><a href="#第-2-章-基础命令和目录结构" class="headerlink" title="第 2 章 基础命令和目录结构"></a>第 2 章 基础命令和目录结构</h1><blockquote><p>小知识？</p></blockquote><p>Linux 其实是 Unix 的一个变种，它的本质还是 Unix。</p><blockquote><p>Shell 的渊源？</p></blockquote><p>Unix 的 shell 有很多种，它们都是基于 Bourne shell（/bin/sh）这个贝尔实验室开发的标准 shell，在早期的 Unix 系统上运行。</p><p>Linux 使用了一个增强版本的 Bourne shell，我们称之为 bash 或者 “Bourne-again” shell。</p><blockquote><p>GUI 的全称是什么？</p></blockquote><p>图形用户界面（Graphical UserInterface，简称 GUI）</p><blockquote><p>Ubuntu 提示符的含义是什么？</p></blockquote><p><img src="https://i.imgur.com/l0T461a.png"></p><p>在 Ubuntu上，提示符是这样：<code>name@host:path$</code>（<code>用户名@主机名:路径$</code>）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> Hello here.</span></span><br></pre></td></tr></table></figure><p>按：在 shell 简单输出字符串。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/passwd</span></span><br></pre></td></tr></table></figure><p>按：这个命令是将文件 <code>/etc/passwd</code> 中的内容显示到 shell 窗口中。</p><p><img src="https://i.imgur.com/uD5MP22.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat file1 file2...</span></span><br></pre></td></tr></table></figure><p>按：cat 命令很简单，它显示一个或者多个文件的内容。</p><p>上面这个 cat 命令会显示 file1 和 file2 等文件的内容，然后退出。之所以叫 cat 是因为如果有多个文件的话，它会把这些文件的内容拼接起来显示。（concat，拼接）</p><blockquote><p>输入 cat 命令然后回车会发生什么？</p></blockquote><p>输入 cat 命令并回车，这时候你会看到屏幕上没有显示任何结果，因为 cat 命令仍在运行中。现在你输入几个字符然后回车，你会看到 cat 命令会在屏幕上显示出你刚刚输入的字符。最后你可以在任意空白行按 CTRL-D 终止 cat 命令的执行并回到 shell 提示符。</p><p>输入 cat 命令并回车，这时候你会看到屏幕上没有显示任何结果，因为 cat 命令仍在运行中。现在你输入几个字符然后回车，你会看到 cat 命令会在屏幕上显示出你刚刚输入的字符。最后你可以在任意空白行按 CTRL-D 终止 cat 命令的执行并回到 shell 提示符。</p><p><img src="https://i.imgur.com/ObAxQ6x.png"></p><blockquote><p>CTRL-D 和 CTRL-C 的区别？</p></blockquote><p>按 CTRL-D 终止当前终端的标准输入并终止命令（通常会终止一个<strong>程序</strong>）。这和 CTRL-C 不一样。CTRL-C 是终止当前<strong>进程</strong>的运行，无论是否有输入和输出。</p><p>按：这里小有疑惑。</p><blockquote><p><code>ls</code> 命令？</p></blockquote><p><code>ls</code> 命令显示指定目录的内容，默认参数为当前目录。<code>ls -l</code> 显示详细的列表，<code>ls -F</code> 显示文件类型信息。下面是文件详细列表的一个示例，其中第三列是文件的所有者，第四列是用户组，第五列是文件大小，后面是文件更改的时间、日期以及文件名。</p><p><img src="https://i.imgur.com/TyUfyNR.png"></p><blockquote><p><code>cp</code> 命令？</p></blockquote><p>cp 命令用来复制文件。下面的命令将文件 file1 复制到文件 file2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp file1 file2</span></span><br></pre></td></tr></table></figure><p>下面的命令将多个文件（file1 … fileN）复制到目录 dir：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp file1...fileN dir</span></span><br></pre></td></tr></table></figure><blockquote><p><code>mv</code> 命令？</p></blockquote><p>mv 命令有点类似 cp，用来重命名文件。下面的命令将文件名从 file1 重命名为 file2：</p><p>你也可以使用 mv 将多个文件移动到某个目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mv file1...fileN dir</span></span><br></pre></td></tr></table></figure><blockquote><p><code>touch</code> 命令？</p></blockquote><p>touch 命令用来创建文件。如果文件已经存在，则该命令会更新文件的时间戳，就是我们在 ls -l 命令的执行结果中看到的文件更新时间和日期。下面的命令创建一个新的文件，内容为空：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> touch file</span></span><br></pre></td></tr></table></figure><blockquote><p><code>rm</code> 命令？</p></blockquote><p>rm 命令用来删除文件，文件一旦被删除通常无法恢复：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm file</span></span><br></pre></td></tr></table></figure><blockquote><p><code>echo</code> 命令？</p></blockquote><p>echo 命令将它的参数显示到标准输出，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> Hello again.</span></span><br><span class="line">Hello again.</span><br></pre></td></tr></table></figure><blockquote><p>Unix 的根目录是什么？</p></blockquote><p>Unix 的目录结构是从 <code>/</code> 开始，有时候也叫作 root 目录。</p><blockquote><p>何为绝对路径？</p></blockquote><p>以 <code>/</code> 开头的路径（如 <code>/usr/lib</code>）叫绝对路径。</p><blockquote><p>何为相对路径？</p></blockquote><p>不以 <code>/</code> 开头的路径叫相对路径。</p><blockquote><p>如何理解两个点 <code>..</code> 和一个点 <code>.</code>？</p></blockquote><ul><li>两个点 <code>..</code> 代表一个目录的上层目录。如果你当前在目录 <code>/usr/lib</code> 中，那么 <code>..</code> 就代表 <code>/usr</code> 目录，<code>./bin</code> 则代表 <code>/usr/bin</code>.</li><li>一个点 <code>.</code> 代表当前目录。如果你当前在 <code>/usr/lib</code> 目录中，<code>.</code> 就代表 <code>/usr/lib</code>，<code>./X11</code> 则代表 <code>/usr/lib/X11</code>。通常我们不使用 <code>.</code>，而是直接使用目录名来访问当前目录下的子目录，如 <code>X11</code> 效果和 <code>./X11</code> 一样。</li></ul><p>按：如果是要执行某可执行文件，比如，C 程序编译出来的 <code>a.out</code> 文件，似乎必须要使用 <code>.</code>，如 <code>./a.out</code>。</p><blockquote><p><code>cd</code> 命令？</p></blockquote><p><code>cd</code> 即 change directory。</p><p><code>cd</code> 命令用来设置当前工作目录。当前工作目录是指你的进程和 shell 所在的目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> dir</span></span><br></pre></td></tr></table></figure><p>按：如果不带 dir 参数，cd  命令会返回你的个人主目录，指的是你登录系统后进入的目录。</p><h1 id="第-15-章-开发工具"><a href="#第-15-章-开发工具" class="headerlink" title="第 15 章 开发工具"></a>第 15 章 开发工具</h1><blockquote><p>什么是 Lex 和 Yacc？</p></blockquote><ul><li>Lex 是一个词法分析器的生成器，它能将文本内容转换成一个个标记。其 GNU/Linux 版本叫做 flex。你可以使用编译器的 <code>-ll</code> 或 <code>-lfl</code> 连接器标记来连接 Lex 的库。<br>  按：<code>-lfl</code> 中的开始和结尾的两个字母都是英文字母 <code>l</code>。</li><li>Yacc 是一个语法分析器的生成器，能根据语法来读取标记。GNU 的分析器是 bison。为使生成的语法分析器与 Yacc 兼容，你需要执行 <code>bison -y</code>。你可以使用编译器的 <code>-ly</code> 连接器标记来连接 Yacc 的库。</li></ul><p>按：这个描述还真是简陋呀，还精通 Linux 呢，浅尝辄止罢了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《东京老铺》札记</title>
      <link href="/2021/10/26/%E3%80%8A%E4%B8%9C%E4%BA%AC%E8%80%81%E9%93%BA%E3%80%8B%E6%9C%AD%E8%AE%B0/"/>
      <url>/2021/10/26/%E3%80%8A%E4%B8%9C%E4%BA%AC%E8%80%81%E9%93%BA%E3%80%8B%E6%9C%AD%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>We arrived late at night, so my first opportunity to really see Japan was during our morning walk the next day through the suburb to see the Arakawa river.</p></blockquote><blockquote><p>All the sights I had seen in Japanese animation and comics sprawled before my eyes.</p></blockquote><blockquote><p>I had this strange, nostalgic feeling, like I knew what was around the corner yet when I actually went there everything was more interesting than I could imagine.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 艺术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 艺术 </tag>
            
            <tag> 插画 </tag>
            
            <tag> 读书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 切片学习笔记</title>
      <link href="/2021/10/23/Python-%E5%88%87%E7%89%87%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/10/23/Python-%E5%88%87%E7%89%87%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;bicycle&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[::<span class="number">3</span>]</span><br><span class="line"><span class="string">&#x27;bye&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[::-<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;elcycib&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[::-<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;eccb&#x27;</span></span><br></pre></td></tr></table></figure><p>这个简单的例子使用的语法格式是 <code>seq[start:end:step]</code>，它的含义是</p><blockquote><p>在 start 和 end 之间以 step 为间隔取值。step 的值可以为负，负值意味着反向取值。</p></blockquote><p>上面有一个经典的利用 step 为负值的反转字符串的用法：<code>s[::-1]</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FluentPython </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《倪亚达很不屑》札记</title>
      <link href="/2021/10/21/%E3%80%8A%E5%80%AA%E4%BA%9A%E8%BE%BE%E5%BE%88%E4%B8%8D%E5%B1%91%E3%80%8B%E6%9C%AD%E8%AE%B0/"/>
      <url>/2021/10/21/%E3%80%8A%E5%80%AA%E4%BA%9A%E8%BE%BE%E5%BE%88%E4%B8%8D%E5%B1%91%E3%80%8B%E6%9C%AD%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>想着，袁哲生的书，即使标着儿童小说的标签，还是拿过来读一读。袁哲生的书，太少了。说不定之后我要把袁哲生做记者时写的记者文也拿过来读读了。</p><p>不知道该遗憾还是不该，我在小学五六年级的时候没有机会读到袁哲生的这个小说，不然，说不定，我“认识”他的时间可能会更加早一些。那时读的都是曹文轩、黄蓓佳之流，也好，有袁哲生的话，那就更好了，那么，在此种情况下，我也将变得很忧郁吧。内里的忧郁。表面说不定会更加阳光。还有，更叛逆，想到这一点，我明白了，我本应该在小时候遇到倪亚达的。</p><blockquote><p>倪亚达<br>学校：明天国小<br>班级：五年一班<br>身份证号：（还没有身份证）<br>特征：矮小，右脚比左脚大一公分<br>兴趣：不劳而获<br>最讨厌的事：量身高和做数学作业<br>口头禅：真是令人不屑<br>未来的志愿：棒球投手或是老师以外的工作<br>休闲方式：写日记、寻找食物</p></blockquote><p>按：如果单单从这个简单的人物描述来看，倪亚达和 <code>花田少年史</code> 中的花田一路君似乎多有相似之处。都喜欢搞怪。只是，从正文的第一篇开始，就很能使人感受到袁哲生那忧郁的气质无可奈何也无法避免地投射到了倪亚达的身上。花田一路君才是真的阳光少年。倪亚达是假装阳光的月光少年。</p><blockquote><p>王大川<br>体重像原子弹，放屁时会产生一朵蕈状云，动作很迟钝，花钱却很迅速。</p></blockquote><p>按：冷笑话。小孩子可能觉得不是。</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
            <tag> 文学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新窝建成记</title>
      <link href="/2021/10/21/%E6%96%B0%E7%AA%9D%E5%BB%BA%E6%88%90%E8%AE%B0/"/>
      <url>/2021/10/21/%E6%96%B0%E7%AA%9D%E5%BB%BA%E6%88%90%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>这个新的博客花了大概两节课（数字图像处理，这门课的老师讲得实在是太差了），然后大概是下午两个多小时，经历了一点点问题之后，整体上是完成了。</p><p>这一博客主要是文字记录，舍弃一些非常复杂的数学公式。</p><p>图床完全使用 imgur。这样其实有一点点地方需要注意，那就是在访问的时候一定要挂上梯子，这样才能正常显示博客中的图片。不过，其他的文字性的内容还是可以正常访问的，无论挂不挂梯子。</p><p>在解决了最后一点点小问题之后，发现这个博客已经差不多完成了。</p><p>下面，该开始写博客了。</p><p>数学公式还没有配置，不过，没有问题，到时用到了再说。而且，这个博客，我大概率只会写一点简单的数学公式。无妨也。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/21/hello-world/"/>
      <url>/2021/10/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
